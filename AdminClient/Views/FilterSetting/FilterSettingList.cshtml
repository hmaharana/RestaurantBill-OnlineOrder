@using Microsoft.Extensions.Configuration;
@using Microsoft.AspNetCore.Http
@inject IConfiguration Configuration;

@{
    ViewBag.Title = "Filter Settings";
    string apiUrl = Configuration.GetValue<string>("WebAPIBaseUrl");
}

<div class="page-header">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="fe fe-pie-chart mr-1"></i>Product Master</a></li>
        <li class="breadcrumb-item active" aria-current="page">Filter Settings</li>
    </ol>
    <div class="ml-auto">
        <a href="#" onclick="showAddBtn()" data-toggle="modal" data-target="#filtersettingsModal" class="btn btn-primary btn-icon btn-sm text-white mr-2">
            <span>
                <i class="fe fe-plus"></i>
            </span> Add New
        </a>

    </div>
</div>

<div class="col-md-12 col-lg-12">
    <div class="card">
        <div class="card-header">
            <div class="card-title">Filter Settings</div>
        </div>
        <div class="card-body">
            <div class="table-responsive">

                <table id="filterSettingsTable" class="table table-striped table-bordered nowrap dataTable no-footer dtr-inline" style="width:100%">
                    <thead>
                        <tr>

                            <th>Category</th>
                            <th>Filter</th>

                            <th>Filter Value</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                </table>

            </div>
        </div>
    </div>
</div>

<div id="filtersettingsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">

            </div>
            <div class="modal-body">
                <form action="#" role="form" class="validate" id="formPost">
                    <div class="row">
                        <div id="treeview">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        <label class="control-label">
                                            Filter
                                        </label>
                                        <select id="filter" class="form-control" required></select>
                                    </div>
                                </div>

                                <div class="col-lg-4" id="ifv" style="display:none">
                                    <div class="form-group">
                                        <label class="control-label">Filter Values</label>
                                        <select multiple="multiple" class="multi-select" id="filtervalue"></select>
                                    </div>
                                </div>
                                <div class="col-lg-4" id="ufv" style="display:none">
                                    <div class="form-group">
                                        <label class="control-label">Filter Values</label>
                                        <select  class="form-control" id="ufiltervalue"></select>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-6">
                                    <button type="button" id="btnSave" class="btn btn-primary" style="display:none">Save</button>
                                    <button type="button" id="btnUpdate" class="btn btn-primary"  style="display:none">Update</button>

                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>






<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css" />

<style>
    .hidden {
        display: none;
    }
</style>

@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js"></script>
    <script>
        var areaId;
        var categoryId;
        var filterSettingId;
        var selectedFilterValues = [];

          function loadFilterValue() {
              var table = $('#filterSettingsTable').DataTable();
            table.destroy();

              table = $('#filterSettingsTable').dataTable({
                "paginationType": "full_numbers",
                "dom": 'Bfrtip',
                "buttons": ['copy', 'csv', 'excel', 'pdf', 'print'],
                "searching": true,
                "paging": true,
                "sort": true,
                "info": true,
                "ajax": {
                    "url": '@apiUrl/api/FilterSettings/GetFilterValueList',
                    "type": "GET",
                    "dataType": "json",
                    "headers": {
                        "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                    },
                    "error": function (data) {
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        }
                    }
                },
                "order": [],
                  "columns": [
                      { "data": "categoryName", "orderable": true },
                    { "data": "filterName", "orderable": true },
                    { "data": "filterValueName", "orderable": true },



                    {
                        "orderable": false,
                        "class": "action_button",
                        "render": function (data, type, row) {
                            var id = row.filterSettingId;
                            var actionButtonsHtml = "";
                            actionButtonsHtml += generateActionButtonForList(id, 'filtersettingsModal');
                            return actionButtonsHtml;
                        }
                    }
                ]
            });
        }


        // Tree View //

        function loadCategory() {
            $('#treeview').jstree({
                'core': {
                    'data': {
                        'url': '/Category/Nodes',
                        'data': function (node) {
                            return { 'id': node.id };
                        }
                    }
                }
            }).on('ready.jstree', function () {

                var t = $('#treeview').jstree(true);
                var n = t.get_node(categoryId);

                t.select_node(n);
                n = t.get_selected(true);
                console.log(n[0].id, n[0]);
            });


            $('#treeview').on('changed.jstree', function (e, data) {
                var i, j, r = [];
                for (i = 0, j = data.selected.length; i < j; i++) {
                    r.push(data.instance.get_node(data.selected[i]));

                }
                categoryId = r[0].id;

            }).jstree();

        }



        $(function () {
            loadFilterValue();
            $('#filterSettingsTable tbody').on('click', 'button[data-target="#delete"]', function () {
                var id = $(this).data('id');
                swal({
                    html: true,
                    title: "Are you sure?",
                    text: "You will not be able to recover this data!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, confirm it!",
                    closeOnConfirm: false
                }, function () {
                    $.ajax({
                        type: "GET",
                        url: "@apiUrl/api/FilterSettings/DeleteFilterSetting/" +id+"/"+@Context.Session.GetInt32("UserId"),

                        contentType: "application/json; charset=utf-8",
                        headers: {
                            "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                        },
                        dataType: "json",
                        success: function (data, statusText, xhr) {
                            if (xhr.status == 200) {
                                $('#filterSettingsTable').DataTable().ajax.reload(null, false);
                                sweetAlert({
                                    html: true,
                                    title: "Filter Setting",
                                    text: "Successfully deleted!",
                                    type: "success"
                                });
                            }else if (xhr.status == 202) {
                                sweetAlert("Validation Alert!", data.responseMsg, "warning");
                            } else {
                                sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                            }
                        },
                        error: function (data) {
                            if (data.status == 401) {
                                window.location.replace('/Message/TokenExpire');
                            } else if (data.status == 403) {
                                window.location.replace('/Message/Unauthorize');
                            }
                        }
                    });
                });
            });


            $('#filterSettingsTable tbody').on('click', 'button[data-target="#filtersettingsModal"]', function () {
                var id = $(this).data('id');

                $('#btnUpdate').show();
                $('#btnSave').hide();
                $('#ifv').hide();
                $('#ufv').show();
                filterSettingId = id;
                loadSingleFilterSetting();
            });

            function loadSingleFilterSetting() {
                 $.ajax({
                type: "GET",
                     url: "@apiUrl/api/FilterSettings/GetSingleFilterSetting/" + filterSettingId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                headers: {
                    "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                },
                success: function (data, statusText, xhr) {
                    console.log(xhr.status);
                    if (xhr.status == 200) {

                        filterList(data.filterId)
                        getFilterValue(data.filterId, data.filterValueId)
                        categoryId = data.categoryId
                      
                        loadCategory();

                    }
                    else {
                        sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                    }
                },
                error: function (data) {
                    console.log(data.status);
                    if (data.status == 401) {
                        console.log('un-authorized/token expired');
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        console.log('forbidden/no permission');
                        window.location.replace('/Message/Unauthorize');
                    }

                }
            });
            }



            $("#btnSave").click(function (e) {
                if (!document.getElementById("formPost").checkValidity()) {
                    e.preventDefault();
                } else {

                    for (l = 0; l < selectedFilterValues.length; l++) {
                        var model = {
                            filterId: parseInt($("#filter").val()),
                            filterValueId: parseInt(selectedFilterValues[l]),
                              categoryId: parseInt(categoryId),
                            createdBy:@Context.Session.GetInt32("UserId"),
                            //order: parseInt($('#order').val())
                        }
                        console.log(model);
                        $.ajax({
                    type: "POST",
                    url: "@apiUrl/api/FilterSettings/CreateFilterSettings",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    headers: {
                            "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                    },
                    dataType: "json",
                    success: function (data, statusText, xhr) {
                        if (xhr.status === 200) {
                           // $('#areaTable').DataTable().ajax.reload(null, false);
                            sweetAlert({
                                html: true,
                                title: "Filter Settings",
                                text: "Successfully created!",
                                type: "success"
                            });
                            window.location.reload();
                        } else if (data.status === "duplicate") {
                            sweetAlert("Validation Alert!", data.responseMsg, "warning");
                        } else if (data.status === "error") {
                            sweetAlert("Validation Alert!", data.responseMsg, "warning");
                        }else {
                                sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                            }
                    },
                    error: function (data) {
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        } else if (data.status == 400) {
                            sweetAlert("Validation Alert!", "Please check input data!", "warning");
                        }
                    }
                    });
                    }

                }
            });



            $("#btnUpdate").click(function (e) {
                if (!document.getElementById("formPost").checkValidity()) {
                    e.preventDefault();
                } else {

                 
                        var model = {
                            filterSettingId: parseInt(filterSettingId),
                            filterId: parseInt($("#filter").val()),
                            filterValueId: parseInt($("#ufiltervalue").val()),
                              categoryId: parseInt(categoryId),
                            createdBy:@Context.Session.GetInt32("UserId"),
                            //order: parseInt($('#order').val())
                        }
                        console.log(model);
                        $.ajax({
                    type: "POST",
                            url: "@apiUrl/api/FilterSettings/UpdateFilterSetting",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    headers: {
                            "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                    },
                    dataType: "json",
                    success: function (data, statusText, xhr) {
                        if (xhr.status === 200) {
                           // $('#areaTable').DataTable().ajax.reload(null, false);
                            sweetAlert({
                                html: true,
                                title: "Filter Settings",
                                text: "Successfully updated!",
                                type: "success"
                            });
                            window.location.reload();
                        } else if (data.status === "duplicate") {
                            sweetAlert("Validation Alert!", data.responseMsg, "warning");
                        } else if (data.status === "error") {
                            sweetAlert("Validation Alert!", data.responseMsg, "warning");
                        }else {
                                sweetAlert("Validation Alert!", "Something unexpected!", "warning");
                            }
                    },
                    error: function (data) {
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        } else if (data.status == 400) {
                            sweetAlert("Validation Alert!", "Please check input data!", "warning");
                        }
                    }
                    });
               
                    //console.log(model);

                }
            });



        });

        function showAddBtn() {
            filterList('');
            $('#btnSave').show();
            $('#btnUpdate').hide();
            $('#ifv').show();
            $('#ufv').hide();
            loadCategory();
            resetInput('#filtersettingsModal');
        }

        function filterList(id) {
            var opt = '';
            $.ajax({
                type: "GET",
                url: "@apiUrl/api/Filter/GetFilterList",
                contentType: "application/json; charset=utf-8",
                headers: {
                   "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                },
                dataType: "json",
                success: function (res) {

                    var options = [];
                    options.push('<option value="">Select Filter Value</option>');
                    for (var i = 0; i < res.data.length; i++) {
                        if (id == res.data[i].filterId) {
                            opt = 'selected'
                        } else {
                            opt = '';
                        }
                        options.push('<option value="' + res.data[i].filterId + '" ' + opt + '>' + res.data[i].filterName+ '</option>');
                    }
                    $("#filter").html(options.join(''));
                },
                error: function (data) {
                    if (data.status == 401) {
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        window.location.replace('/Message/Unauthorize');
                    }
                }
            });
        }

        function getFilterValue(filterId,id) {

             var opt = '';
            $.ajax({
                type: "GET",
                url: '@apiUrl/api/FilterValue/GetFilterValueListByFilterId/' + filterId,

                headers: {
                    "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                },
                dataType: "json",
                success: function (data) {
                    var options = [];
                    console.log(data)

                    for (var i = 0; i < data['data'].length; i++) {
                        if (id == data['data'][i].filterValuesId) {
                            opt = 'selected'
                        } else {
                            opt = '';
                        }

                        options.push('<option value="' + data['data'][i].filterValuesId + '" ' + opt + '>' + data['data'][i].filterValueName + '</option>');

                    }
                    $("#ufiltervalue").html(options.join(''));

                },
                error: function (data) {
                    if (data.status == 401) {
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        window.location.replace('/Message/Unauthorize');
                    }
                }
            });


        }

        $("#filter").change(function () {
            var filterId = $("#filter").val()
             var opt = '';
            $.ajax({
                type: "GET",
                url: '@apiUrl/api/FilterValue/GetFilterValueListByFilterId/' + filterId,

                headers: {
                    "authorization": "Bearer @Context.Session.GetString("TokenTxt")"

                },
                dataType: "json",
                success: function (data) {
                    var options = [];
                    console.log(data)

                    for (var i = 0; i < data['data'].length; i++) {


                        options.push('<option value="' + data['data'][i].filterValuesId + '" ' + opt + '>' + data['data'][i].filterValueName + '</option>');

                    }
                    $("#filtervalue").html(options.join(''));
                    $('#filtervalue').change(function () {

                        selectedFilterValues = $(this).val()
                        console.log(selectedFilterValues);
                    }).multipleSelect({
                        width: '100%'
                    });
                },
                error: function (data) {
                    if (data.status == 401) {
                        window.location.replace('/Message/TokenExpire');
                    } else if (data.status == 403) {
                        window.location.replace('/Message/Unauthorize');
                    }
                }
            });

        });

    </script>
}